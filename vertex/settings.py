"""
Django settings for vertex project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import os
from dotenv import load_dotenv
import dj_database_url
from celery.schedules import crontab
import sentry_sdk
from firebase_admin import initialize_app
from kombu import Queue
import firebase_admin
from firebase_admin import credentials
import boto3 
from botocore.exceptions import NoCredentialsError, PartialCredentialsError

# Import your custom logging configuration 
# from .logging import LOGGING

# Ensure the LOGGING settings are used 
# LOGGING = LOGGING

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', default='your secret key')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', default='False').lower() == "true"

ALLOWED_HOSTS = ['127.0.0.1','localhost','vertexx-85dc684c56f3.herokuapp.com']


# Application definition

INSTALLED_APPS = [
    "daphne", # Daphne for the ASGI version of the runserver command
    "channels", # Django Channels for WebSockets, etc.
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "myapp",
    'notifications',
    'rest_framework',
    'rest_framework_simplejwt',
    # 'rest_framework_simplejwt.token_blacklist',  # Add token_blacklist app
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.apple',
    'timezone_field',
    'corsheaders',
    "fcm_django",
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # Add this at the top
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Add the account middleware:
    "vertex.middleware.ErrorLoggerMiddleware",
    "vertex.middleware.InfoLoggerMiddleware",
    "vertex.middleware.CustomResponseMiddleware",
    "allauth.account.middleware.AccountMiddleware",
]

CORS_ALLOWED_ORIGINS = [
    "http://127.0.0.1:8080",
    "http://localhost:8080",  # In case you're using localhost without the 
    "https://frabjous-beijinho-4b366a.netlify.app",
    "https://vertexx-85dc684c56f3.herokuapp.com"
]

CSRF_TRUSTED_ORIGINS = [
    "https://vertexx-85dc684c56f3.herokuapp.com",
    "https://frabjous-beijinho-4b366a.netlify.app",
]


CORS_ALLOW_CREDENTIALS = True

ROOT_URLCONF = "vertex.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR/'templates')],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

AUTH_USER_MODEL = 'myapp.CustomUser'


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_UNIQUE_EMAIL = True
SOCIALACCOUNT_QUERY_EMAIL = True

# For synchronous handling (default for most Django setups)
WSGI_APPLICATION = "vertex.wsgi.application"

# For asynchronous handling (used by Django Channels)
ASGI_APPLICATION = "vertex.asgi.application"


# Retrieve the Redis URL from environment variables
REDIS_URL = os.getenv('REDIS_URL')  # This is usually set by your cloud provider like Heroku

# If REDIS_URL is available (e.g., from Heroku), use it directly
if REDIS_URL:
    # Ensure we use SSL if the URL is rediss://
    if 'rediss://' in REDIS_URL:
        # For Redis over SSL, we add ssl_cert_reqs=none
        redis_url = f"{REDIS_URL}?ssl_cert_reqs=none"
    else:
        redis_url = REDIS_URL  # If it's a non-SSL connection, use as-is
else:
    # Fallback in case the environment variable is not set (local development)
    redis_url = 'redis://localhost:6379'

CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [redis_url],  # Dynamically set the Redis URL
        },
    },
}


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": BASE_DIR / "db.sqlite3",
#     }
# }

if DEBUG and os.getenv("DATABASE_URL"):
    DATABASES = {
        'default': dj_database_url.config(conn_max_age=0, conn_health_checks=True)
    }
elif DEBUG:
    DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE"),
        "NAME": os.getenv("DB_NAME"),
        "USER": os.getenv("DB_USER"),
        "PASSWORD": os.getenv("DB_PASSWORD"),
        "HOST": os.getenv("DB_HOST"),
        "PORT": os.getenv("DB_PORT"),
        "CONN_MAX_AGE": 0,  # Maximum connection age in seconds (e.g., 5 minutes)
        'CONN_MAX_NUM': 20,   # Maximum number of connections in the pool
    }
}
else:
    DATABASES = {
    'default': dj_database_url.config(conn_max_age=0, conn_health_checks=True)
    }

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# STATICFILES_DIRS = [ os.path.join(BASE_DIR, 'static'), ]


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')

AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = os.getenv('AWS_S3_REGION_NAME')

# Static files (CSS, JavaScript, etc.)
AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'
# STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/static/'

# Media files (uploaded user content)
MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/'

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=7),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,  # Enables blacklisting
    'AUTH_TOKEN_CLASSES': ('rest_framework_simplejwt.tokens.AccessToken',),
}


REST_FRAMEWORK = {
    # for jwt tokens
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),

    # Default permission class to require authentication
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    # Pagination settings
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,  # You can adjust the default page size

}

# SMTP authentication settings
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_PORT = 465  # Specify the SMTP server's port (587 for TLS or 465 for SSL)
EMAIL_USE_TLS = False  # Use TLS for secure email transmission
EMAIL_USE_SSL = True  # Use SSL (set to True if your SMTP server requires it)
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD')
# Default sender address for emails sent by Django
DEFAULT_FROM_EMAIL = os.getenv('EMAIL_HOST_USER')


ADMINS = [
    ('Admin', 'julichuks3@gmail.com'),
]


# Define the URL for login redirects (if applicable)
# LOGIN_REDIRECT_URL = '/'  # or the URL where users should be redirected after login
# LOGOUT_REDIRECT_URL = '/'  # or the URL where users should be redirected after logout
LOGIN_REDIRECT_URL = '/api/google-signup/'


# Provider specific settings
SOCIALACCOUNT_PROVIDERS = {
    'google': {
        # For each OAuth based provider, either add a ``SocialApp``
        # (``socialaccount`` app) containing the required client
        # credentials, or list them here:
        # 'APP': {
        #     'client_id': os.getenv('GOOGLE_CLIENT_ID'),
        #     'secret': os.getenv('GOOGLE_SECRET'),
        #     'key': ''
        # },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {
            'access_type': 'offline',
        },
        'OAUTH_PKCE_ENABLED': True,
        'FETCH_USERINFO' : True
    }
}

# Get the Redis URL from the environment variables
CELERY_BROKER_URL = os.environ.get('REDIS_URL', 'redis://localhost:6379/0')  # Default to local Redis for development
# CELERY_BROKER_URL = os.getenv('REDIS_URL')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TASK_SERIALIZER = 'json'
CELERY_TIMEZONE ='UTC'

# Load environment variables
GOOGLE_WEB_CLIENT_ID = os.getenv('GOOGLE_WEB_CLIENT_ID')
GOOGLE_IOS_CLIENT_ID = os.getenv('GOOGLE_IOS_CLIENT_ID')
GOOGLE_ANDROID_CLIENT_ID = os.getenv('GOOGLE_ANDROID_CLIENT_ID')

# Example Facebook credentials
FACEBOOK_APP_ID = os.getenv('FACEBOOK_APP_ID')
FACEBOOK_APP_SECRET = os.getenv('FACEBOOK_APP_SECRET')

# Example Apple credentials
APPLE_CLIENT_ID = os.getenv('APPLE_CLIENT_ID')
APPLE_CLIENT_SECRET = os.getenv('APPLE_CLIENT_SECRET')




CELERY_TASK_QUEUES = (
    Queue('default'),
    Queue('priority_high'),
)

CELERY_DEFAULT_QUEUE = 'default'
CELERY_TASK_ROUTES = {
    'myapp.tasks.process_league_promotions': {'queue': 'priority_high'},
    'myapp.tasks.process_company_league_promotions': {'queue': 'priority_high'},
    'myapp.tasks.send_gem_update': {'queue': 'default'}, 
    'myapp.tasks.send_status_update': {'queue': 'default'}, 
    'myapp.tasks.send_next_league_update': {'queue': 'default'},
    'notifications.tasks.check_and_notify_users': {'queue': 'default'},
    'notifications.tasks.notify_gem_reset': {'queue': 'default'},
}


CELERY_BEAT_SCHEDULE = {
    'reset-daily-streaks-every-midnight': {
        'task': 'myapp.tasks.reset_daily_streaks',
        'schedule': crontab(minute='*/20'),  # Run the task every 25 minutes
    },
    'run-company-draws-every-month': {
        'task': 'myapp.tasks.run_company_draws',
        'schedule': crontab(day_of_month=1, hour=15, minute=0),  # 1st of every month at 3pm utc
    },
    'run-global-draw-every-quarter': {
        'task': 'myapp.tasks.run_global_draw',
        'schedule': crontab(month_of_year='*/3', day_of_month=1, hour=15, minute=0), # every 1st of 3 months at 3pm utc
    },
    'run-global-draw-every-day': {
        'task': 'myapp.tasks.create_global_draw',
        'schedule': timedelta(days=1),  # Every day
    },
    'reset-gems-every-monday-midnight': {
        'task': 'myapp.tasks.reset_gems_for_local_timezones',
        'schedule': crontab(minute='*/30'),  # Every 30 minutes
    },
    'process_league_promotions_every_10_seconds': {
        'task': 'myapp.tasks.process_league_promotions',
        'schedule': timedelta(seconds=5), # Every 10s
        'options': {'queue': 'priority_high'}
    },
    'process_company_league_promotions_every_10_seconds': {
        'task': 'myapp.tasks.process_company_league_promotions',
        'schedule': timedelta(seconds=5), # Every 10 seconds
        'options': {'queue': 'priority_high'}
    },
    'notify-draw-one-day-before': {
        'task': 'notifications.tasks.notify_draw_one_day_before',
        'schedule': crontab(hour=3, minute=0),  # Runs daily at 3 AM UTC
    },
    'notify-draw-one-hour-before': {
        'task': 'notifications.tasks.notify_draw_one_hour_before',
        'schedule': crontab(minute=0),  # Runs at the start of every hour
    },
    'notify-draw-live': {
        'task': 'notifications.tasks.notify_draw_live',
        'schedule': crontab(minute=0),  # Runs at the start of every hour
    },
    'check_and_notify_users': {
        'task': 'notifications.tasks.check_and_notify_users',
        'schedule': crontab(minute=0),  # Every hour
    },
    'notify_gem_reset': {
        'task': 'notifications.tasks.notify_gem_reset',
        'schedule': crontab(minute=0),  # Every hour
    }
}


sentry_sdk.init(
    dsn="https://ddfd780df73f55423570f6550b5d57fa@o4508177221091328.ingest.de.sentry.io/4508256174080080",
    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for tracing.
    traces_sample_rate=1.0,
    _experiments={
        # Set continuous_profiling_auto_start to True
        # to automatically start the profiler on when
        # possible.
        "continuous_profiling_auto_start": True,
    },
)


S3_BUCKET_NAME = os.getenv("AWS_STORAGE_BUCKET_NAME")
S3_FILE_NAME = os.getenv("S3_FILE_NAME")
# Check if S3_FILE_NAME is available
if S3_FILE_NAME:
    LOCAL_FILE_PATH = os.path.join(BASE_DIR, S3_FILE_NAME)
    # print(f"LOCAL_FILE_PATH: {LOCAL_FILE_PATH}")

    # Download the file from S3
    s3 = boto3.client('s3')
    try:
        s3.download_file(S3_BUCKET_NAME, S3_FILE_NAME, LOCAL_FILE_PATH)
        # print(f"Downloaded {S3_FILE_NAME} to {LOCAL_FILE_PATH}")

        # Initialize Firebase Admin with the service account credentials
        cred = credentials.Certificate(LOCAL_FILE_PATH)
        firebase_admin.initialize_app(cred)

    except (NoCredentialsError, PartialCredentialsError) as e:
        print("Error downloading from S3 due to credential issues:", e)
    except Exception as e:
        print("Error downloading from S3:", e)

else:
    print("S3_FILE_NAME is not set. Skipping S3 file download and Firebase initialization.")

FCM_DJANGO_SETTINGS = {
     # an instance of firebase_admin.App to be used as default for all fcm-django requests
     # default: None (the default Firebase app)
    "DEFAULT_FIREBASE_APP": None,
     # default: _('FCM Django')
    "APP_VERBOSE_NAME": "My Notification Service",
     # true if you want to have only one active device per registered user at a time
     # default: False
    "ONE_DEVICE_PER_USER": True,
     # devices to which notifications cannot be sent,
     # are deleted upon receiving error response from FCM
     # default: False
    "DELETE_INACTIVE_DEVICES": True,
}



# LOGGING = {
#     'version': 1,
#     'disable_existing_loggers': False,
#     'handlers': {
#         'console': {
#             'level': 'WARNING',  # Change to 'ERROR' if you want even fewer messages
#             'class': 'logging.StreamHandler',
#         },
#     },
#     'loggers': {
#         'django': {
#             'handlers': ['console'],
#             'level': 'WARNING',  # Change to 'ERROR' if you want even fewer messages
#             'propagate': True,
#         },
#     },
# }
